services:
  api-gateway:
    image: ${API_GATEWAY_IMAGE}
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./ApiGateway/Dockerfile
    ports:
      - ${API_GATEWAY_PORT}:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${API_GATEWAY_STAGE}
      - ASPNETCORE_URLS=${API_GATEWAY_URLS}
    networks:
      - observability
  
  users-api:
    container_name: users-api
    build:
      context: .
      dockerfile: ./Services/Users/Dockerfile
    ports:
      - ${USER_SERVICE_PORT}:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${USER_SERVICE_STAGE}
      - ASPNETCORE_URLS=http:${USER_SERVICE_URLS}
    depends_on:
      - users-db
  
  users-db:
    image: mongo:8.0.14-noble
    container_name: users-db
    restart: unless-stopped
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  rabbitmq:
    container_name: rabbitmq
    image: ${RABBITMQ_IMAGE}
    restart: unless-stopped
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_PLUGINS_PREINSTALL=${GF_PLUGINS_PREINSTALL}
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
    volumes:
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - observability

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - observability
  
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100" # port host:port container
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observability

volumes:
  mongo_data:
  rabbitmq_data:
  grafana_data: { }

networks:
  observability: